#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

function _file_init()
{
        delete _files_open;
        delete _files_error;
        delete _files_eof;

        return 1;
}

function _file_fini()
{
        delete _files_open;
        delete _files_error;
        delete _files_eof;
}

function path_clean(string)
{
        assert(string != "");

        #debug("Cleaning string " string " from // sequences\n");
        while (match(string, "//+") != 0) {
                sub("//+", "/", string);
                #debug("Fixed, path is now " string "\n");
        }

        return string;
}

function file_find(paths, infile)
{
        tmpfile = "";

        for (p in paths) {
                tmpfile = p "/" infile;
                if (readable(tmpfile)) {
                        break;
                }
        }

        return tmpfile;
}

#function file_open(_file, _mode)
#{
#        assert(_file != "");
#        assert(_mode != "");
#
#        if (index(_mode, "r") != 0) {
#
#                if (!readable(_file)) {
#                        return "";
#                }
#
#                if (index(_mode, "r+") && !writable(_file)) {
#                        return "";
#                }
#        } else if (index(_mode, "w") != 0) {
#
#                if (!writable(_file)) {
#                        return "";
#                }
#
#                if (index(_mode, "w+") && !readable(_file)) {
#                        return "";
#                }
#                printf("") > _file;
#        } else if (index(_mode, "a") != 0) {
#
#                if (!writable(_file)) {
#                        return "";
#                }
#
#                if (index(_mode, "a+") && !readable(_file)) {
#                        return "";
#                }
#        } else {
#                assert(0);
#        }
#
#        _files_open[_file]  = 1;
#        _files_error[_file] = 0;
#        _files_eof[_file]   = 0;
#
#        return _file;
#}
#
#function _check_array_entry(_array, _entry)
#{
#        _ret_val = 0;
#
#        assert(_entry != "");
#
#        for (_a in _array) {
#
#                if (_a == _entry) {
#                        _ret_val = 1;
#                        break;
#                }
#        }
#        return _ret_val;
#}
#
#function file_error(_file)
#{
#        assert(_file != "");
#
#        if (!_check_array_entry(_files_error, _file)) {
#                error("File `" _file "` is not open for read");
#                return 0;
#        }
#        return _files_error[_file];
#}
#
#function file_eof(_file)
#{
#        assert(_file != "");
#
#        if (!_check_array_entry(_files_eof, _file)) {
#                error("File `" _file "` is not open for read");
#                return 0;
#        }
#        return _files_eof[_file];
#}
#
#function file_close(_file)
#{
#        assert(_file != "");
#
#        if (_check_array_entry(_files_open, _file)) {
#
#                if (!_files_open[_file]) {
#                        warning("File `" _file "` is not open.");
#                        return 1;
#                }
#
#                if(!close(_file)) {
#                        _files[_file] = 0;
#                        return 1;
#                }
#        } else {
#                warning("File `" _file "` was never open.");
#                return 1;
#        }
#        return 0;
#}
#
#function file_readline(_file)
#{
#        _f = "";
#
#        assert(_file != "");
#
#        if (!_check_array_entry(_files_open, _file)) {
#                error("File `" _file "` is not open");
#        }
#
#        _f = getline _line < _file;
#
#        if (_f == 0) {
#                _files_eof[_file] = 1;
#        } else if (_f == -1) {
#                _files_error[_file] = 1;
#        } else {
#                _files_eof[_file]  = 0;
#                _files_error[_file] = 0;
#        }
#        return _line;
#}
