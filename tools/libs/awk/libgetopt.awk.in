#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

function _getopt_init()
{
	optind     = 1;
	opterr     = 1; # Standard default value
	_opti      = 0;

	return 1;
}

function _getopt_fini()
{
}

#
# Stolen and modified version of getopt.awk, originally by
# Arnold Robbins <arnold@gnu.org>
# We have rearranged this function to act even if
# LINT="fatal" is set.
#
function getopt(optargc, optargv, options)
{
	i           = 0;
	optopt      = "";
	thisopt     = "";
	printerrors = opterr; # Set as opterr

	if (length(options) == 0) {
		return -1;
	}

	if (substr(options, 1, 1) == ":") {
		printerrors = 0; # Override
	}

	if ((optind >= optargc) || (optargc == 1)) {
		return -1;
	}

	if (optargv[optind] !~ /^-[^: [:space:]]/) {
		_opti = 0;
		return -1;
	}

#	if (length(optargv[optind]) > 2) {
#		optind++
#		return "?";
#	}

	if (optargv[optind] == "--") {
		optind++;
		_opti = 0;
		return -1;
	}

	if (_opti == 0) {
		_opti = 2;
	}

	thisopt = substr(optargv[optind], _opti, 1);
	optopt  = thisopt;
	i       = index(options, thisopt);

	if (i == 0) {
		if (printerrors) {
			error("Invalid option -- " optopt "\n");
		}

		if (_opti >= length(optargv[optind])) {
			optind++;
			_opti = 0;
		} else {
			_opti++;
		}

		return "?";
	}

	if (i < length(options) && substr(options, i + 1, 1) == ":") {

		if (length(optargv[optind]) - _opti > 0) {
			optarg = substr(optargv[optind], _opti + 1);
		} else {
			if (optind + 1 == optargc) {

				if (substr(options, 1, 1) == ":") {
					return ":";
				}

				if (printerrors) {
					error("Option requires an argument " \
					      "-- " optopt "\n");
				}

				return "?";
			}

			optarg = optargv[++optind];
		}
		_opti = 0;
	} else {
		optarg = "";
	}

	if (_opti == 0 || _opti >= length(optargv[optind])) {
		optind++;
		_opti = 0;
	} else {
		_opti++;
	}

	return thisopt;
}
